let response,yup,Product,fs;_b49‍.x([["createProductSchema",()=>createProductSchema],["validateUniqueTitle",()=>validateUniqueTitle],["validateUpdateUniqueTitle",()=>validateUpdateUniqueTitle]]);_b49‍.w("express",[["response",["response"],function(v){response=v}]]);_b49‍.w("yup",[["*",null,function(v){yup=v}]]);_b49‍.w("../../models/Product",[["default",["Product"],function(v){Product=v}]]);_b49‍.w("fs",[["default",["fs"],function(v){fs=v}]]);




// Just like before, without the id field
       const createProductSchema = yup.object({
  title: yup.string().required(),
  desc: yup.string().required(),
  categories: yup.string().required(),
  sizes: yup.string(),
  colors: yup.string(),
  price: yup.string().required(),
  currency: yup.string().required()
});

       const validateUniqueTitle = async (req, res, next) => {
  const check = await Product.findOne({ title: req.body.title}).exec();
    
  if(check) {
    //Unlink file from temporary storage
    const { path } = req.file
    fs.unlinkSync(path);

    return res.status(400).json({
      error: "Product with Title already exist"
    });
  }
  next();
}

       const validateUpdateUniqueTitle = async (req, res, next) => {
  const { id } = req.params;
  
  const check = await Product.findOne({ title: req.body.title});

  if(check && check.id !== id) {
    //Unlink file from temporary storage
    const { path } = req.file;
    fs.unlinkSync(path);

    return res.status(400).json({
      error: "Product with title already exist"
    });
  }
  next();
}